cmake_minimum_required(VERSION 3.8)
project(abv_controller)

# Compiler flags
if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

option(ARCH_TEST "Force-disable NatNet regardless of architecture" OFF)

# Shared library lookup behavior
set(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)
set(CMAKE_INSTALL_RPATH "$ORIGIN")
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

# Packages
find_package(ament_cmake REQUIRED)
find_package(rclcpp REQUIRED)
find_package(robot_idl REQUIRED)
find_package(Eigen3 REQUIRED)
find_package(yaml-cpp REQUIRED)

set(BUILD_SHARED_LIBS OFF CACHE BOOL "Build static libmotioncapture")
add_subdirectory(dependencies/libmotioncapture)

# Architecture detection
set(ARCH_X86 FALSE)
set(ARCH_ARM FALSE)

if(CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64")
  set(ARCH_X86 TRUE)
  add_definitions(-DARCH_X86)
elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL "aarch64")
  set(ARCH_ARM TRUE)
  add_definitions(-DARCH_ARM)
endif()

# Source files (common)
set(ABV_CONTROLLER_SOURCES 
  src/CommandHandler.cpp
  src/ConfigurationManager.cpp
  src/Controller.cpp
  src/main.cpp 
  src/OptitrackStateFetcher_LibMocap.cpp
  src/RosStatePublisher.cpp
  src/RosTopicManager.cpp
  src/SimulatedStateFetcher.cpp
  src/StateMachine.cpp
  src/ThrusterCommander.cpp
  src/UdpClient.cpp
  src/UdpThrusterDriver.cpp
  src/Vehicle.cpp
  src/VehicleStateTracker.cpp
)

# Conditionally include architecture dependent sources
if(ARCH_X86)
	list(APPEND ABV_CONTROLLER_SOURCES 
		src/DummyThrusterDriver.cpp)
elseif(ARCH_ARM)
	list(APPEND ABV_CONTROLLER_SOURCES 
		src/GpioThrusterDriver.cpp)
endif()

# Create executable
add_executable(${PROJECT_NAME} ${ABV_CONTROLLER_SOURCES})

# Include directories
target_include_directories(${PROJECT_NAME} PRIVATE
	${CMAKE_CURRENT_LIST_DIR}/include
	${CMAKE_CURRENT_LIST_DIR}/include/plog/plog-master/include
	${CMAKE_CURRENT_LIST_DIR}/dependencies/libmotioncapture/include
	${EIGEN3_INCLUDE_DIRS}
)

if(ARCH_ARM)
	target_include_directories(${PROJECT_NAME} PRIVATE
		${CMAKE_CURRENT_LIST_DIR}/dependencies/JETGPIO-1.2)
endif()

# Dependencies
ament_target_dependencies(${PROJECT_NAME}
  rclcpp
  robot_idl
  Eigen3
)

# Link libraries
target_link_libraries(${PROJECT_NAME} yaml-cpp libmotioncapture)

if(ARCH_ARM)
	# manually set because it doesnt use cmake 
	set(jetgpio_LIB ${CMAKE_CURRENT_LIST_DIR}/dependencies/JETGPIO-1.2/libjetgpio.so)
    target_link_libraries(${PROJECT_NAME} ${jetgpio_LIB})
	install(FILES ${CMAKE_CURRENT_LIST_DIR}/dependencies/JETGPIO-1.2/libjetgpio.so DESTINATION lib/${PROJECT_NAME})
endif()

# Install
install(TARGETS ${PROJECT_NAME} DESTINATION lib/${PROJECT_NAME})
install(DIRECTORY configuration/ DESTINATION share/${PROJECT_NAME}/configuration)

install(
  PROGRAMS run.sh
  DESTINATION bin
)

ament_package()
